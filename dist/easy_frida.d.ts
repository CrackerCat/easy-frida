import frida = require('frida');
export default class EasyFrida {
    target: number | string;
    location: 'usb' | 'local' | 'remote';
    targetos: 'win' | 'linux' | 'android' | 'ios';
    remoteAddr?: string;
    compileOptions: {
        bytecode: boolean;
        babelify: boolean;
        esmify: boolean;
        loose: boolean;
        sourcemap: boolean;
        compress: boolean;
        useAbsolutePaths: boolean;
    };
    baseDir: string;
    agentProjectDir: string;
    outFile: string;
    logFile?: string;
    scriptFile?: string;
    device?: frida.Device;
    enableChildGating: boolean;
    private curProc;
    private procList;
    private interacting;
    private fridaRepl;
    private scopeCount;
    private prompt;
    private remoteEvalCallbacks;
    private watcher;
    constructor(target: number | string, location: 'usb' | 'local' | 'remote', targetos: 'win' | 'linux' | 'android' | 'ios', remoteAddr?: string);
    run(target?: string | number): Promise<boolean>;
    attach: (target?: string | number) => Promise<boolean>;
    attachOrRun(target?: string | number): Promise<boolean>;
    rerun(): void;
    inject(file?: string, target?: string | number): Promise<void>;
    resume(pid?: number): void;
    getDevice(): Promise<frida.Device>;
    private attachToSession;
    reload(): Promise<void>;
    compile(file?: string): Promise<unknown>;
    load(file?: string): Promise<void>;
    watch(file?: string, target?: string | number): Promise<void>;
    interact(finallyKill?: boolean): Promise<void>;
    private localEval;
    private remoteEval;
    private onChild;
    private onCrashed;
    private log;
    detach(): Promise<void>;
    kill(): Promise<void>;
    private onMessage;
    private updatePrompt;
}
